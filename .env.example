# PinAI Subnet Environment Configuration
# Copy this file to .env and fill in your values
# WARNING: Never commit .env file with real private keys!

# ============================================================
# PRIVATE KEYS (REQUIRED)
# ============================================================
# IMPORTANT: Use test-only private keys with NO real funds!

# Matcher/Test private key (used for matcher signing and test intent submissions)
TEST_PRIVATE_KEY=

# Validator private keys (comma-separated, required for running validators)
# Number of keys must match NUM_VALIDATORS
# Example: VALIDATOR_KEYS=key1,key2,key3
VALIDATOR_KEYS=

# ============================================================
# Consensus Configuration
# ============================================================
# Consensus type: "raft" or "cometbft"
CONSENSUS_TYPE=raft

# Number of validators to run
NUM_VALIDATORS=3

# ============================================================
# Subnet Configuration
# ============================================================
# Default Subnet ID (all validators use this unless VALIDATOR_SUBNET_IDS is set)
SUBNET_ID=0x0000000000000000000000000000000000000000000000000000000000000002

# Per-validator Subnet IDs (optional, comma-separated)
# If set, each validator uses its corresponding Subnet ID
# Example: VALIDATOR_SUBNET_IDS=0x...002,0x...009,0x...002
# VALIDATOR_SUBNET_IDS=

# Matcher Subnet ID (which subnet the matcher serves)
# MATCHER_SUBNET_ID=0x0000000000000000000000000000000000000000000000000000000000000002

# ============================================================
# RootLayer Endpoints
# ============================================================
ROOTLAYER_GRPC=3.17.208.238:9001
ROOTLAYER_HTTP=http://3.17.208.238:8081/api/v1

# ============================================================
# Blockchain Configuration (Base Sepolia)
# ============================================================
ENABLE_CHAIN_SUBMIT=true
CHAIN_RPC_URL=https://sepolia.base.org
CHAIN_NETWORK=base_sepolia

# ============================================================
# Smart Contract Addresses (Base Sepolia)
# ============================================================
PIN_BASE_SEPOLIA_INTENT_MANAGER=0xD04d23775D3B8e028e6104E31eb0F6c07206EB46
PIN_BASE_SEPOLIA_SUBNET_FACTORY=0x493c5B1c7Ee9eDe75bf2e57e5250E695F929A796
PIN_BASE_SEPOLIA_STAKING_MANAGER=0xAc11AE66c7831A70Bea940b0AE16c967f940cB65
PIN_BASE_SEPOLIA_CHECKPOINT_MANAGER=0xe947c9C4183D583fB2E500aD05B105Fa01abE57e

# Legacy alias (for backward compatibility)
INTENT_MANAGER_ADDR=0xD04d23775D3B8e028e6104E31eb0F6c07206EB46

# ============================================================
# Optional Configuration
# ============================================================
# Log directory (default: ./subnet-logs)
# LOGS_DIR=./subnet-logs

# Test mode: true=background, false=foreground (default: false)
# TEST_MODE=false

# Start agent: if true, starts simple-agent; if false, skips agent (default: true)
# Set to false if you want to start your own agents separately
# START_AGENT=true

# ============================================================
# Usage Examples
# ============================================================
# 1. Copy this file:
#    cp .env.example .env
#
# 2. Fill in required values (TEST_PRIVATE_KEY and VALIDATOR_KEYS)
#
# 3. Load environment:
#    set -a && source .env && set +a
#
# 4. Start subnet with Raft (3 validators):
#    ./scripts/start-subnet.sh
#
# 5. Start subnet with CometBFT (3 validators):
#    export CONSENSUS_TYPE=cometbft
#    ./scripts/start-subnet.sh
#
# 6. Start with different number of validators:
#    export NUM_VALIDATORS=5
#    export VALIDATOR_KEYS=key1,key2,key3,key4,key5
#    ./scripts/start-subnet.sh
#
# 7. Run E2E test:
#    ./run-e2e.sh --no-interactive
#
# ============================================================
# Security Notes
# ============================================================
# ⚠️  NEVER commit private keys to git
# ⚠️  Use .env file (already in .gitignore)
# ⚠️  Use test-only keys with no real funds
# ⚠️  Rotate keys regularly in production
