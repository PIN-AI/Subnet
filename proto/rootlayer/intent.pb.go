// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v4.25.3
// source: rootlayer/intent.proto

package rootlayerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Lifecycle states for an intent.
type IntentStatus int32

const (
	// Not specified or invalid.
	IntentStatus_INTENT_STATUS_UNSPECIFIED IntentStatus = 0
	// Accepted and awaiting processing.
	IntentStatus_INTENT_STATUS_PENDING IntentStatus = 1
	// The intent has been recorded on-chain.
	IntentStatus_INTENT_STATUS_CHAINED IntentStatus = 2
	// Bidding process finished (matcher-selected agent).
	IntentStatus_INTENT_STATUS_PROCESSING IntentStatus = 3
	// Execution finished successfully.
	IntentStatus_INTENT_STATUS_COMPLETED IntentStatus = 4
	// No longer valid due to time or policy.
	IntentStatus_INTENT_STATUS_EXPIRED IntentStatus = 5
	// Irrecoverable failure.
	IntentStatus_INTENT_STATUS_FAILED IntentStatus = 6
)

// Enum value maps for IntentStatus.
var (
	IntentStatus_name = map[int32]string{
		0: "INTENT_STATUS_UNSPECIFIED",
		1: "INTENT_STATUS_PENDING",
		2: "INTENT_STATUS_CHAINED",
		3: "INTENT_STATUS_PROCESSING",
		4: "INTENT_STATUS_COMPLETED",
		5: "INTENT_STATUS_EXPIRED",
		6: "INTENT_STATUS_FAILED",
	}
	IntentStatus_value = map[string]int32{
		"INTENT_STATUS_UNSPECIFIED": 0,
		"INTENT_STATUS_PENDING":     1,
		"INTENT_STATUS_CHAINED":     2,
		"INTENT_STATUS_PROCESSING":  3,
		"INTENT_STATUS_COMPLETED":   4,
		"INTENT_STATUS_EXPIRED":     5,
		"INTENT_STATUS_FAILED":      6,
	}
)

func (x IntentStatus) Enum() *IntentStatus {
	p := new(IntentStatus)
	*p = x
	return p
}

func (x IntentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_rootlayer_intent_proto_enumTypes[0].Descriptor()
}

func (IntentStatus) Type() protoreflect.EnumType {
	return &file_rootlayer_intent_proto_enumTypes[0]
}

func (x IntentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntentStatus.Descriptor instead.
func (IntentStatus) EnumDescriptor() ([]byte, []int) {
	return file_rootlayer_intent_proto_rawDescGZIP(), []int{0}
}

// Canonical intent entity stored by RootLayer.
type Intent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Canonical intent ID (32-byte 0x-prefixed hex string recommended).
	IntentId string `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	// Target subnet identifier (32-byte 0x-prefixed hex string).
	SubnetId string `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Requester wallet address (EIP-55 checksum expected).
	Requester string `protobuf:"bytes,3,opt,name=requester,proto3" json:"requester,omitempty"`
	// Settlement chain name, e.g. "base_sepolia".
	SettleChain string `protobuf:"bytes,4,opt,name=settle_chain,json=settleChain,proto3" json:"settle_chain,omitempty"`
	// Application-specific type, e.g. "book_flight".
	IntentType string `protobuf:"bytes,5,opt,name=intent_type,json=intentType,proto3" json:"intent_type,omitempty"`
	// Execution parameters.
	Params *IntentParams `protobuf:"bytes,6,opt,name=params,proto3" json:"params,omitempty"`
	// keccak256(params) used by on-chain verification.
	ParamsHash []byte `protobuf:"bytes,7,opt,name=params_hash,json=paramsHash,proto3" json:"params_hash,omitempty"`
	// ERC-20 token address for tips (0x0 for native).
	TipsToken string `protobuf:"bytes,8,opt,name=tips_token,json=tipsToken,proto3" json:"tips_token,omitempty"`
	// Tips amount as uint256 decimal string.
	Tips string `protobuf:"bytes,9,opt,name=tips,proto3" json:"tips,omitempty"`
	// ERC-20 token address for budget (0x0 for native).
	BudgetToken string `protobuf:"bytes,10,opt,name=budget_token,json=budgetToken,proto3" json:"budget_token,omitempty"`
	// Maximum execution budget as uint256 decimal string.
	Budget string `protobuf:"bytes,11,opt,name=budget,proto3" json:"budget,omitempty"`
	// Execution deadline (unix seconds).
	Deadline int64 `protobuf:"varint,12,opt,name=deadline,proto3" json:"deadline,omitempty"`
	// Expiration for on-chain submission (unix seconds).
	IntentExpiration int64 `protobuf:"varint,13,opt,name=intent_expiration,json=intentExpiration,proto3" json:"intent_expiration,omitempty"`
	// Current status.
	Status IntentStatus `protobuf:"varint,14,opt,name=status,proto3,enum=rootlayer.v1.IntentStatus" json:"status,omitempty"`
	// Creation time (unix seconds).
	CreatedAt int64 `protobuf:"varint,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// User signature over canonical intent content.
	Signature []byte `protobuf:"bytes,16,opt,name=signature,proto3" json:"signature,omitempty"`
	// RootLayer has acknowledged PENDING status (ready for subnet bidding).
	PendingConfirmed bool `protobuf:"varint,17,opt,name=pending_confirmed,json=pendingConfirmed,proto3" json:"pending_confirmed,omitempty"`
	// RootLayer has acknowledged PROCESSING status (agent executing).
	ProcessingConfirmed bool `protobuf:"varint,18,opt,name=processing_confirmed,json=processingConfirmed,proto3" json:"processing_confirmed,omitempty"`
	// RootLayer has acknowledged final status (COMPLETED/EXPIRED/FAILED).
	ValidationConfirmed bool `protobuf:"varint,19,opt,name=validation_confirmed,json=validationConfirmed,proto3" json:"validation_confirmed,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Intent) Reset() {
	*x = Intent{}
	mi := &file_rootlayer_intent_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Intent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Intent) ProtoMessage() {}

func (x *Intent) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_intent_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Intent.ProtoReflect.Descriptor instead.
func (*Intent) Descriptor() ([]byte, []int) {
	return file_rootlayer_intent_proto_rawDescGZIP(), []int{0}
}

func (x *Intent) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

func (x *Intent) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *Intent) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

func (x *Intent) GetSettleChain() string {
	if x != nil {
		return x.SettleChain
	}
	return ""
}

func (x *Intent) GetIntentType() string {
	if x != nil {
		return x.IntentType
	}
	return ""
}

func (x *Intent) GetParams() *IntentParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Intent) GetParamsHash() []byte {
	if x != nil {
		return x.ParamsHash
	}
	return nil
}

func (x *Intent) GetTipsToken() string {
	if x != nil {
		return x.TipsToken
	}
	return ""
}

func (x *Intent) GetTips() string {
	if x != nil {
		return x.Tips
	}
	return ""
}

func (x *Intent) GetBudgetToken() string {
	if x != nil {
		return x.BudgetToken
	}
	return ""
}

func (x *Intent) GetBudget() string {
	if x != nil {
		return x.Budget
	}
	return ""
}

func (x *Intent) GetDeadline() int64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *Intent) GetIntentExpiration() int64 {
	if x != nil {
		return x.IntentExpiration
	}
	return 0
}

func (x *Intent) GetStatus() IntentStatus {
	if x != nil {
		return x.Status
	}
	return IntentStatus_INTENT_STATUS_UNSPECIFIED
}

func (x *Intent) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Intent) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Intent) GetPendingConfirmed() bool {
	if x != nil {
		return x.PendingConfirmed
	}
	return false
}

func (x *Intent) GetProcessingConfirmed() bool {
	if x != nil {
		return x.ProcessingConfirmed
	}
	return false
}

func (x *Intent) GetValidationConfirmed() bool {
	if x != nil {
		return x.ValidationConfirmed
	}
	return false
}

// Opaque parameters supplied by the client for execution.
type IntentParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Raw intent payload as bytes. In JSON it is base64-encoded.
	// Some clients may submit hex strings; servers should normalize as needed.
	IntentRaw []byte `protobuf:"bytes,1,opt,name=intent_raw,json=intentRaw,proto3" json:"intent_raw,omitempty"`
	// Optional metadata bytes (base64 in JSON).
	Metadata      []byte `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntentParams) Reset() {
	*x = IntentParams{}
	mi := &file_rootlayer_intent_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntentParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentParams) ProtoMessage() {}

func (x *IntentParams) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_intent_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentParams.ProtoReflect.Descriptor instead.
func (*IntentParams) Descriptor() ([]byte, []int) {
	return file_rootlayer_intent_proto_rawDescGZIP(), []int{1}
}

func (x *IntentParams) GetIntentRaw() []byte {
	if x != nil {
		return x.IntentRaw
	}
	return nil
}

func (x *IntentParams) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_rootlayer_intent_proto protoreflect.FileDescriptor

const file_rootlayer_intent_proto_rawDesc = "" +
	"\n" +
	"\x16rootlayer/intent.proto\x12\frootlayer.v1\"\xb4\x05\n" +
	"\x06Intent\x12\x1b\n" +
	"\tintent_id\x18\x01 \x01(\tR\bintentId\x12\x1b\n" +
	"\tsubnet_id\x18\x02 \x01(\tR\bsubnetId\x12\x1c\n" +
	"\trequester\x18\x03 \x01(\tR\trequester\x12!\n" +
	"\fsettle_chain\x18\x04 \x01(\tR\vsettleChain\x12\x1f\n" +
	"\vintent_type\x18\x05 \x01(\tR\n" +
	"intentType\x122\n" +
	"\x06params\x18\x06 \x01(\v2\x1a.rootlayer.v1.IntentParamsR\x06params\x12\x1f\n" +
	"\vparams_hash\x18\a \x01(\fR\n" +
	"paramsHash\x12\x1d\n" +
	"\n" +
	"tips_token\x18\b \x01(\tR\ttipsToken\x12\x12\n" +
	"\x04tips\x18\t \x01(\tR\x04tips\x12!\n" +
	"\fbudget_token\x18\n" +
	" \x01(\tR\vbudgetToken\x12\x16\n" +
	"\x06budget\x18\v \x01(\tR\x06budget\x12\x1a\n" +
	"\bdeadline\x18\f \x01(\x03R\bdeadline\x12+\n" +
	"\x11intent_expiration\x18\r \x01(\x03R\x10intentExpiration\x122\n" +
	"\x06status\x18\x0e \x01(\x0e2\x1a.rootlayer.v1.IntentStatusR\x06status\x12\x1d\n" +
	"\n" +
	"created_at\x18\x0f \x01(\x03R\tcreatedAt\x12\x1c\n" +
	"\tsignature\x18\x10 \x01(\fR\tsignature\x12+\n" +
	"\x11pending_confirmed\x18\x11 \x01(\bR\x10pendingConfirmed\x121\n" +
	"\x14processing_confirmed\x18\x12 \x01(\bR\x13processingConfirmed\x121\n" +
	"\x14validation_confirmed\x18\x13 \x01(\bR\x13validationConfirmed\"I\n" +
	"\fIntentParams\x12\x1d\n" +
	"\n" +
	"intent_raw\x18\x01 \x01(\fR\tintentRaw\x12\x1a\n" +
	"\bmetadata\x18\x02 \x01(\fR\bmetadata*\xd3\x01\n" +
	"\fIntentStatus\x12\x1d\n" +
	"\x19INTENT_STATUS_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15INTENT_STATUS_PENDING\x10\x01\x12\x19\n" +
	"\x15INTENT_STATUS_CHAINED\x10\x02\x12\x1c\n" +
	"\x18INTENT_STATUS_PROCESSING\x10\x03\x12\x1b\n" +
	"\x17INTENT_STATUS_COMPLETED\x10\x04\x12\x19\n" +
	"\x15INTENT_STATUS_EXPIRED\x10\x05\x12\x18\n" +
	"\x14INTENT_STATUS_FAILED\x10\x06BDZBgithub.com/pin-protocol/rootlayer/api/gen/go/rootlayer;rootlayerv1b\x06proto3"

var (
	file_rootlayer_intent_proto_rawDescOnce sync.Once
	file_rootlayer_intent_proto_rawDescData []byte
)

func file_rootlayer_intent_proto_rawDescGZIP() []byte {
	file_rootlayer_intent_proto_rawDescOnce.Do(func() {
		file_rootlayer_intent_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rootlayer_intent_proto_rawDesc), len(file_rootlayer_intent_proto_rawDesc)))
	})
	return file_rootlayer_intent_proto_rawDescData
}

var file_rootlayer_intent_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rootlayer_intent_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_rootlayer_intent_proto_goTypes = []any{
	(IntentStatus)(0),    // 0: rootlayer.v1.IntentStatus
	(*Intent)(nil),       // 1: rootlayer.v1.Intent
	(*IntentParams)(nil), // 2: rootlayer.v1.IntentParams
}
var file_rootlayer_intent_proto_depIdxs = []int32{
	2, // 0: rootlayer.v1.Intent.params:type_name -> rootlayer.v1.IntentParams
	0, // 1: rootlayer.v1.Intent.status:type_name -> rootlayer.v1.IntentStatus
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_rootlayer_intent_proto_init() }
func file_rootlayer_intent_proto_init() {
	if File_rootlayer_intent_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rootlayer_intent_proto_rawDesc), len(file_rootlayer_intent_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rootlayer_intent_proto_goTypes,
		DependencyIndexes: file_rootlayer_intent_proto_depIdxs,
		EnumInfos:         file_rootlayer_intent_proto_enumTypes,
		MessageInfos:      file_rootlayer_intent_proto_msgTypes,
	}.Build()
	File_rootlayer_intent_proto = out.File
	file_rootlayer_intent_proto_goTypes = nil
	file_rootlayer_intent_proto_depIdxs = nil
}
