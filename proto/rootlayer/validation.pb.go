// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v4.25.3
// source: rootlayer/validation.proto

package rootpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Aggregated validation attestation from a subnet to RootLayer.
type ValidationBundle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Source subnet (32-byte 0x-prefixed hex string).
	SubnetId string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Target intent ID.
	IntentId string `protobuf:"bytes,2,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	// Assignment reference that produced this result.
	AssignmentId string `protobuf:"bytes,3,opt,name=assignment_id,json=assignmentId,proto3" json:"assignment_id,omitempty"`
	// Executing agent identifier.
	AgentId string `protobuf:"bytes,4,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// RootLayer reference height.
	RootHeight uint64 `protobuf:"varint,5,opt,name=root_height,json=rootHeight,proto3" json:"root_height,omitempty"`
	// RootLayer reference hash (0x-prefixed hex string).
	RootHash string `protobuf:"bytes,6,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	// Execution timestamp (unix seconds).
	ExecutedAt int64 `protobuf:"varint,7,opt,name=executed_at,json=executedAt,proto3" json:"executed_at,omitempty"`
	// Hash of execution result payload (0x-prefixed hex if JSON uses string; base64 by default for bytes).
	ResultHash []byte `protobuf:"bytes,8,opt,name=result_hash,json=resultHash,proto3" json:"result_hash,omitempty"`
	// Hash of execution proof (if any).
	ProofHash []byte `protobuf:"bytes,9,opt,name=proof_hash,json=proofHash,proto3" json:"proof_hash,omitempty"`
	// Individual validator signatures over msg_hash.
	Signatures []*ValidationSignature `protobuf:"bytes,10,rep,name=signatures,proto3" json:"signatures,omitempty"`
	// Optional bitmap for validator IDs, packed by validator index.
	SignerBitmap []byte `protobuf:"bytes,11,opt,name=signer_bitmap,json=signerBitmap,proto3" json:"signer_bitmap,omitempty"`
	// Total validator weight included in the signatures.
	TotalWeight uint64 `protobuf:"varint,12,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	// Which validator acted as the aggregator for this bundle.
	AggregatorId string `protobuf:"bytes,13,opt,name=aggregator_id,json=aggregatorId,proto3" json:"aggregator_id,omitempty"`
	// Aggregation finalized timestamp (unix seconds).
	CompletedAt   int64 `protobuf:"varint,14,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidationBundle) Reset() {
	*x = ValidationBundle{}
	mi := &file_rootlayer_validation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationBundle) ProtoMessage() {}

func (x *ValidationBundle) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_validation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationBundle.ProtoReflect.Descriptor instead.
func (*ValidationBundle) Descriptor() ([]byte, []int) {
	return file_rootlayer_validation_proto_rawDescGZIP(), []int{0}
}

func (x *ValidationBundle) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *ValidationBundle) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

func (x *ValidationBundle) GetAssignmentId() string {
	if x != nil {
		return x.AssignmentId
	}
	return ""
}

func (x *ValidationBundle) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *ValidationBundle) GetRootHeight() uint64 {
	if x != nil {
		return x.RootHeight
	}
	return 0
}

func (x *ValidationBundle) GetRootHash() string {
	if x != nil {
		return x.RootHash
	}
	return ""
}

func (x *ValidationBundle) GetExecutedAt() int64 {
	if x != nil {
		return x.ExecutedAt
	}
	return 0
}

func (x *ValidationBundle) GetResultHash() []byte {
	if x != nil {
		return x.ResultHash
	}
	return nil
}

func (x *ValidationBundle) GetProofHash() []byte {
	if x != nil {
		return x.ProofHash
	}
	return nil
}

func (x *ValidationBundle) GetSignatures() []*ValidationSignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *ValidationBundle) GetSignerBitmap() []byte {
	if x != nil {
		return x.SignerBitmap
	}
	return nil
}

func (x *ValidationBundle) GetTotalWeight() uint64 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

func (x *ValidationBundle) GetAggregatorId() string {
	if x != nil {
		return x.AggregatorId
	}
	return ""
}

func (x *ValidationBundle) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

// Single validator attestation inside a bundle.
type ValidationSignature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Signer validator address (0x-prefixed hex string).
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	// Signature bytes. In JSON, the service may accept 0x-prefixed hex strings,
	// but bytes are base64 by default per protobuf JSON mapping.
	Signature     []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidationSignature) Reset() {
	*x = ValidationSignature{}
	mi := &file_rootlayer_validation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationSignature) ProtoMessage() {}

func (x *ValidationSignature) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_validation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationSignature.ProtoReflect.Descriptor instead.
func (*ValidationSignature) Descriptor() ([]byte, []int) {
	return file_rootlayer_validation_proto_rawDescGZIP(), []int{1}
}

func (x *ValidationSignature) GetValidator() string {
	if x != nil {
		return x.Validator
	}
	return ""
}

func (x *ValidationSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Acknowledgment for ValidationBundle submission.
type ValidationAck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the bundle was accepted.
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// Context message.
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// Optional reference for tracking.
	ReceiptId     string `protobuf:"bytes,3,opt,name=receipt_id,json=receiptId,proto3" json:"receipt_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidationAck) Reset() {
	*x = ValidationAck{}
	mi := &file_rootlayer_validation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationAck) ProtoMessage() {}

func (x *ValidationAck) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_validation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationAck.ProtoReflect.Descriptor instead.
func (*ValidationAck) Descriptor() ([]byte, []int) {
	return file_rootlayer_validation_proto_rawDescGZIP(), []int{2}
}

func (x *ValidationAck) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ValidationAck) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ValidationAck) GetReceiptId() string {
	if x != nil {
		return x.ReceiptId
	}
	return ""
}

var File_rootlayer_validation_proto protoreflect.FileDescriptor

const file_rootlayer_validation_proto_rawDesc = "" +
	"\n" +
	"\x1arootlayer/validation.proto\x12\frootlayer.v1\"\xfe\x03\n" +
	"\x10ValidationBundle\x12\x1b\n" +
	"\tsubnet_id\x18\x01 \x01(\tR\bsubnetId\x12\x1b\n" +
	"\tintent_id\x18\x02 \x01(\tR\bintentId\x12#\n" +
	"\rassignment_id\x18\x03 \x01(\tR\fassignmentId\x12\x19\n" +
	"\bagent_id\x18\x04 \x01(\tR\aagentId\x12\x1f\n" +
	"\vroot_height\x18\x05 \x01(\x04R\n" +
	"rootHeight\x12\x1b\n" +
	"\troot_hash\x18\x06 \x01(\tR\brootHash\x12\x1f\n" +
	"\vexecuted_at\x18\a \x01(\x03R\n" +
	"executedAt\x12\x1f\n" +
	"\vresult_hash\x18\b \x01(\fR\n" +
	"resultHash\x12\x1d\n" +
	"\n" +
	"proof_hash\x18\t \x01(\fR\tproofHash\x12A\n" +
	"\n" +
	"signatures\x18\n" +
	" \x03(\v2!.rootlayer.v1.ValidationSignatureR\n" +
	"signatures\x12#\n" +
	"\rsigner_bitmap\x18\v \x01(\fR\fsignerBitmap\x12!\n" +
	"\ftotal_weight\x18\f \x01(\x04R\vtotalWeight\x12#\n" +
	"\raggregator_id\x18\r \x01(\tR\faggregatorId\x12!\n" +
	"\fcompleted_at\x18\x0e \x01(\x03R\vcompletedAt\"Q\n" +
	"\x13ValidationSignature\x12\x1c\n" +
	"\tvalidator\x18\x01 \x01(\tR\tvalidator\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\"P\n" +
	"\rValidationAck\x12\x0e\n" +
	"\x02ok\x18\x01 \x01(\bR\x02ok\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x1d\n" +
	"\n" +
	"receipt_id\x18\x03 \x01(\tR\treceiptIdBDZBgithub.com/pin-protocol/rootlayer/api/gen/go/rootlayer;rootlayerv1b\x06proto3"

var (
	file_rootlayer_validation_proto_rawDescOnce sync.Once
	file_rootlayer_validation_proto_rawDescData []byte
)

func file_rootlayer_validation_proto_rawDescGZIP() []byte {
	file_rootlayer_validation_proto_rawDescOnce.Do(func() {
		file_rootlayer_validation_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rootlayer_validation_proto_rawDesc), len(file_rootlayer_validation_proto_rawDesc)))
	})
	return file_rootlayer_validation_proto_rawDescData
}

var file_rootlayer_validation_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_rootlayer_validation_proto_goTypes = []any{
	(*ValidationBundle)(nil),    // 0: rootlayer.v1.ValidationBundle
	(*ValidationSignature)(nil), // 1: rootlayer.v1.ValidationSignature
	(*ValidationAck)(nil),       // 2: rootlayer.v1.ValidationAck
}
var file_rootlayer_validation_proto_depIdxs = []int32{
	1, // 0: rootlayer.v1.ValidationBundle.signatures:type_name -> rootlayer.v1.ValidationSignature
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_rootlayer_validation_proto_init() }
func file_rootlayer_validation_proto_init() {
	if File_rootlayer_validation_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rootlayer_validation_proto_rawDesc), len(file_rootlayer_validation_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rootlayer_validation_proto_goTypes,
		DependencyIndexes: file_rootlayer_validation_proto_depIdxs,
		MessageInfos:      file_rootlayer_validation_proto_msgTypes,
	}.Build()
	File_rootlayer_validation_proto = out.File
	file_rootlayer_validation_proto_goTypes = nil
	file_rootlayer_validation_proto_depIdxs = nil
}
