// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v4.25.3
// source: rootlayer/service.proto

package rootlayerv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Standard acknowledgment wrapper for write operations.
type Ack struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the operation succeeded.
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// Optional human-readable message for additional context or errors.
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// Transaction hash on chain if the operation triggers an on-chain tx.
	TxHash        string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_rootlayer_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_rootlayer_service_proto_rawDescGZIP(), []int{0}
}

func (x *Ack) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *Ack) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Ack) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

type SubscribeIntentsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target subnet to subscribe to (32-byte 0x-prefixed hex string).
	SubnetId string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Only stream intents whose deadline is greater than or equal to this unix timestamp.
	MinDeadline int64 `protobuf:"varint,2,opt,name=min_deadline,json=minDeadline,proto3" json:"min_deadline,omitempty"`
	// Minimum tips filter as uint256 decimal string.
	MinTips string `protobuf:"bytes,3,opt,name=min_tips,json=minTips,proto3" json:"min_tips,omitempty"`
	// Optional filter: include only these intent types.
	IntentTypes []string `protobuf:"bytes,4,rep,name=intent_types,json=intentTypes,proto3" json:"intent_types,omitempty"`
	// Optional filter: include intents with these statuses only.
	StatusFilter []IntentStatus `protobuf:"varint,5,rep,packed,name=status_filter,json=statusFilter,proto3,enum=rootlayer.v1.IntentStatus" json:"status_filter,omitempty"`
	// If true, emit historical intents first before live updates.
	IncludeHistorical bool `protobuf:"varint,6,opt,name=include_historical,json=includeHistorical,proto3" json:"include_historical,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SubscribeIntentsRequest) Reset() {
	*x = SubscribeIntentsRequest{}
	mi := &file_rootlayer_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeIntentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeIntentsRequest) ProtoMessage() {}

func (x *SubscribeIntentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeIntentsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeIntentsRequest) Descriptor() ([]byte, []int) {
	return file_rootlayer_service_proto_rawDescGZIP(), []int{1}
}

func (x *SubscribeIntentsRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *SubscribeIntentsRequest) GetMinDeadline() int64 {
	if x != nil {
		return x.MinDeadline
	}
	return 0
}

func (x *SubscribeIntentsRequest) GetMinTips() string {
	if x != nil {
		return x.MinTips
	}
	return ""
}

func (x *SubscribeIntentsRequest) GetIntentTypes() []string {
	if x != nil {
		return x.IntentTypes
	}
	return nil
}

func (x *SubscribeIntentsRequest) GetStatusFilter() []IntentStatus {
	if x != nil {
		return x.StatusFilter
	}
	return nil
}

func (x *SubscribeIntentsRequest) GetIncludeHistorical() bool {
	if x != nil {
		return x.IncludeHistorical
	}
	return false
}

type IntentStreamEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Event kind: one of "new_intent", "status_changed", "chained".
	EventType string `protobuf:"bytes,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// The intent payload associated with the event.
	Intent *Intent `protobuf:"bytes,2,opt,name=intent,proto3" json:"intent,omitempty"`
	// Server-side event timestamp (unix seconds).
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Event source identifier (implementation-defined).
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// Additional metadata for the event.
	Metadata      map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntentStreamEvent) Reset() {
	*x = IntentStreamEvent{}
	mi := &file_rootlayer_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntentStreamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentStreamEvent) ProtoMessage() {}

func (x *IntentStreamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentStreamEvent.ProtoReflect.Descriptor instead.
func (*IntentStreamEvent) Descriptor() ([]byte, []int) {
	return file_rootlayer_service_proto_rawDescGZIP(), []int{2}
}

func (x *IntentStreamEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *IntentStreamEvent) GetIntent() *Intent {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *IntentStreamEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *IntentStreamEvent) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *IntentStreamEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SubscribeStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Intent IDs to watch.
	IntentIds []string `protobuf:"bytes,1,rep,name=intent_ids,json=intentIds,proto3" json:"intent_ids,omitempty"`
	// Emit updates only when status becomes one of these values.
	Statuses []IntentStatus `protobuf:"varint,2,rep,packed,name=statuses,proto3,enum=rootlayer.v1.IntentStatus" json:"statuses,omitempty"`
	// Consumer identifier for observability.
	SubscriberId  string `protobuf:"bytes,3,opt,name=subscriber_id,json=subscriberId,proto3" json:"subscriber_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeStatusRequest) Reset() {
	*x = SubscribeStatusRequest{}
	mi := &file_rootlayer_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeStatusRequest) ProtoMessage() {}

func (x *SubscribeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeStatusRequest.ProtoReflect.Descriptor instead.
func (*SubscribeStatusRequest) Descriptor() ([]byte, []int) {
	return file_rootlayer_service_proto_rawDescGZIP(), []int{3}
}

func (x *SubscribeStatusRequest) GetIntentIds() []string {
	if x != nil {
		return x.IntentIds
	}
	return nil
}

func (x *SubscribeStatusRequest) GetStatuses() []IntentStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *SubscribeStatusRequest) GetSubscriberId() string {
	if x != nil {
		return x.SubscriberId
	}
	return ""
}

type StatusUpdateEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Intent ID whose status changed.
	IntentId string `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	// Previous status value.
	OldStatus IntentStatus `protobuf:"varint,2,opt,name=old_status,json=oldStatus,proto3,enum=rootlayer.v1.IntentStatus" json:"old_status,omitempty"`
	// New status value.
	NewStatus IntentStatus `protobuf:"varint,3,opt,name=new_status,json=newStatus,proto3,enum=rootlayer.v1.IntentStatus" json:"new_status,omitempty"`
	// Optional reason for the change.
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// Update timestamp (unix seconds).
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Free-form metadata for the update.
	Metadata      map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusUpdateEvent) Reset() {
	*x = StatusUpdateEvent{}
	mi := &file_rootlayer_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdateEvent) ProtoMessage() {}

func (x *StatusUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdateEvent.ProtoReflect.Descriptor instead.
func (*StatusUpdateEvent) Descriptor() ([]byte, []int) {
	return file_rootlayer_service_proto_rawDescGZIP(), []int{4}
}

func (x *StatusUpdateEvent) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

func (x *StatusUpdateEvent) GetOldStatus() IntentStatus {
	if x != nil {
		return x.OldStatus
	}
	return IntentStatus_INTENT_STATUS_UNSPECIFIED
}

func (x *StatusUpdateEvent) GetNewStatus() IntentStatus {
	if x != nil {
		return x.NewStatus
	}
	return IntentStatus_INTENT_STATUS_UNSPECIFIED
}

func (x *StatusUpdateEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *StatusUpdateEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StatusUpdateEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SubmitIntentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the intent was accepted into the mempool.
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	// Context message describing acceptance or validation error.
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// Canonical intent ID (hash) computed/accepted by the server.
	IntentId string `protobuf:"bytes,3,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	// keccak256(params) used by on-chain verification.
	ParamsHash []byte `protobuf:"bytes,4,opt,name=params_hash,json=paramsHash,proto3" json:"params_hash,omitempty"`
	// Expiration for on-chain submission (unix seconds).
	IntentExpiration int64 `protobuf:"varint,5,opt,name=intent_expiration,json=intentExpiration,proto3" json:"intent_expiration,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SubmitIntentResponse) Reset() {
	*x = SubmitIntentResponse{}
	mi := &file_rootlayer_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitIntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentResponse) ProtoMessage() {}

func (x *SubmitIntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentResponse.ProtoReflect.Descriptor instead.
func (*SubmitIntentResponse) Descriptor() ([]byte, []int) {
	return file_rootlayer_service_proto_rawDescGZIP(), []int{5}
}

func (x *SubmitIntentResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *SubmitIntentResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SubmitIntentResponse) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

func (x *SubmitIntentResponse) GetParamsHash() []byte {
	if x != nil {
		return x.ParamsHash
	}
	return nil
}

func (x *SubmitIntentResponse) GetIntentExpiration() int64 {
	if x != nil {
		return x.IntentExpiration
	}
	return 0
}

// Batch intent submission request.
type SubmitIntentBatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Intents to submit.
	Items []*SubmitIntentRequest `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// Optional client-provided batch identifier for idempotency.
	BatchId string `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// Allow partial success. If false, stop processing at first failure.
	PartialOk *bool `protobuf:"varint,3,opt,name=partial_ok,json=partialOk,proto3,oneof" json:"partial_ok,omitempty"`
	// If true, treat already existing intents as successful submissions.
	TreatExistsAsOk *bool `protobuf:"varint,4,opt,name=treat_exists_as_ok,json=treatExistsAsOk,proto3,oneof" json:"treat_exists_as_ok,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SubmitIntentBatchRequest) Reset() {
	*x = SubmitIntentBatchRequest{}
	mi := &file_rootlayer_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitIntentBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentBatchRequest) ProtoMessage() {}

func (x *SubmitIntentBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentBatchRequest.ProtoReflect.Descriptor instead.
func (*SubmitIntentBatchRequest) Descriptor() ([]byte, []int) {
	return file_rootlayer_service_proto_rawDescGZIP(), []int{6}
}

func (x *SubmitIntentBatchRequest) GetItems() []*SubmitIntentRequest {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SubmitIntentBatchRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *SubmitIntentBatchRequest) GetPartialOk() bool {
	if x != nil && x.PartialOk != nil {
		return *x.PartialOk
	}
	return false
}

func (x *SubmitIntentBatchRequest) GetTreatExistsAsOk() bool {
	if x != nil && x.TreatExistsAsOk != nil {
		return *x.TreatExistsAsOk
	}
	return false
}

// Batch intent submission response.
type SubmitIntentBatchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Per-intent responses aligned with request order.
	Results []*SubmitIntentResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// Number of successful submissions.
	Success int32 `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// Number of failed submissions.
	Failed int32 `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
	// Optional summary message.
	Msg           string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitIntentBatchResponse) Reset() {
	*x = SubmitIntentBatchResponse{}
	mi := &file_rootlayer_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitIntentBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentBatchResponse) ProtoMessage() {}

func (x *SubmitIntentBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentBatchResponse.ProtoReflect.Descriptor instead.
func (*SubmitIntentBatchResponse) Descriptor() ([]byte, []int) {
	return file_rootlayer_service_proto_rawDescGZIP(), []int{7}
}

func (x *SubmitIntentBatchResponse) GetResults() []*SubmitIntentResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SubmitIntentBatchResponse) GetSuccess() int32 {
	if x != nil {
		return x.Success
	}
	return 0
}

func (x *SubmitIntentBatchResponse) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *SubmitIntentBatchResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// Batch validation bundle request.
type ValidationBundleBatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Validation bundles to submit.
	Bundles []*ValidationBundle `protobuf:"bytes,1,rep,name=bundles,proto3" json:"bundles,omitempty"`
	// Optional client-provided batch identifier for idempotency.
	BatchId string `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// Allow partial success.
	PartialOk     *bool `protobuf:"varint,3,opt,name=partial_ok,json=partialOk,proto3,oneof" json:"partial_ok,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidationBundleBatchRequest) Reset() {
	*x = ValidationBundleBatchRequest{}
	mi := &file_rootlayer_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationBundleBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationBundleBatchRequest) ProtoMessage() {}

func (x *ValidationBundleBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationBundleBatchRequest.ProtoReflect.Descriptor instead.
func (*ValidationBundleBatchRequest) Descriptor() ([]byte, []int) {
	return file_rootlayer_service_proto_rawDescGZIP(), []int{8}
}

func (x *ValidationBundleBatchRequest) GetBundles() []*ValidationBundle {
	if x != nil {
		return x.Bundles
	}
	return nil
}

func (x *ValidationBundleBatchRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *ValidationBundleBatchRequest) GetPartialOk() bool {
	if x != nil && x.PartialOk != nil {
		return *x.PartialOk
	}
	return false
}

// Batch validation bundle response.
type ValidationBundleBatchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Per-bundle responses aligned with request order.
	Results []*ValidationAck `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// Number of successful submissions.
	Success int32 `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// Number of failed submissions.
	Failed int32 `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
	// Optional summary message.
	Msg           string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidationBundleBatchResponse) Reset() {
	*x = ValidationBundleBatchResponse{}
	mi := &file_rootlayer_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationBundleBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationBundleBatchResponse) ProtoMessage() {}

func (x *ValidationBundleBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationBundleBatchResponse.ProtoReflect.Descriptor instead.
func (*ValidationBundleBatchResponse) Descriptor() ([]byte, []int) {
	return file_rootlayer_service_proto_rawDescGZIP(), []int{9}
}

func (x *ValidationBundleBatchResponse) GetResults() []*ValidationAck {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ValidationBundleBatchResponse) GetSuccess() int32 {
	if x != nil {
		return x.Success
	}
	return 0
}

func (x *ValidationBundleBatchResponse) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *ValidationBundleBatchResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetIntentsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter by exact intent ID.
	IntentId string `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	// Filter by subnet (32-byte 0x-prefixed hex string).
	SubnetId string `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Filter by status name (e.g. PENDING, COMPLETED).
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Filter by requester address (EIP-55 checksum lowercase/uppercase tolerated).
	Requester string `protobuf:"bytes,4,opt,name=requester,proto3" json:"requester,omitempty"`
	// Return intents whose deadline >= this unix timestamp.
	MinDeadline int64 `protobuf:"varint,5,opt,name=min_deadline,json=minDeadline,proto3" json:"min_deadline,omitempty"`
	// Return intents whose tips amount >= this uint256 decimal string.
	MinTips string `protobuf:"bytes,6,opt,name=min_tips,json=minTips,proto3" json:"min_tips,omitempty"`
	// 1-based page index (defaults to 1).
	Page int32 `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`
	// Number of items per page (defaults to 20; max 100).
	PageSize int32 `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Sort field (e.g. "created_at", "deadline").
	OrderBy string `protobuf:"bytes,9,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Sort direction: "asc" or "desc".
	OrderDir      string `protobuf:"bytes,10,opt,name=order_dir,json=orderDir,proto3" json:"order_dir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIntentsRequest) Reset() {
	*x = GetIntentsRequest{}
	mi := &file_rootlayer_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIntentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntentsRequest) ProtoMessage() {}

func (x *GetIntentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntentsRequest.ProtoReflect.Descriptor instead.
func (*GetIntentsRequest) Descriptor() ([]byte, []int) {
	return file_rootlayer_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetIntentsRequest) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

func (x *GetIntentsRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *GetIntentsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetIntentsRequest) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

func (x *GetIntentsRequest) GetMinDeadline() int64 {
	if x != nil {
		return x.MinDeadline
	}
	return 0
}

func (x *GetIntentsRequest) GetMinTips() string {
	if x != nil {
		return x.MinTips
	}
	return ""
}

func (x *GetIntentsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetIntentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetIntentsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *GetIntentsRequest) GetOrderDir() string {
	if x != nil {
		return x.OrderDir
	}
	return ""
}

type GetIntentsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Page of matching intents.
	Intents []*Intent `protobuf:"bytes,1,rep,name=intents,proto3" json:"intents,omitempty"`
	// Total number of matching items.
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// Echo of requested page index.
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	// Echo of requested page size.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Total number of pages given the current filters.
	TotalPages    int64 `protobuf:"varint,5,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIntentsResponse) Reset() {
	*x = GetIntentsResponse{}
	mi := &file_rootlayer_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIntentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntentsResponse) ProtoMessage() {}

func (x *GetIntentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntentsResponse.ProtoReflect.Descriptor instead.
func (*GetIntentsResponse) Descriptor() ([]byte, []int) {
	return file_rootlayer_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetIntentsResponse) GetIntents() []*Intent {
	if x != nil {
		return x.Intents
	}
	return nil
}

func (x *GetIntentsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetIntentsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetIntentsResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetIntentsResponse) GetTotalPages() int64 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

type GetIntentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Intent ID to fetch.
	IntentId      string `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetIntentRequest) Reset() {
	*x = GetIntentRequest{}
	mi := &file_rootlayer_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntentRequest) ProtoMessage() {}

func (x *GetIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntentRequest.ProtoReflect.Descriptor instead.
func (*GetIntentRequest) Descriptor() ([]byte, []int) {
	return file_rootlayer_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetIntentRequest) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

type SubmitIntentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Client-provided intent ID. A 32-byte 0x-prefixed hex value is recommended.
	IntentId string `protobuf:"bytes,1,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	// Target subnet identifier (32-byte 0x-prefixed hex string).
	SubnetId string `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Requester wallet address (EIP-55 checksum expected).
	Requester string `protobuf:"bytes,3,opt,name=requester,proto3" json:"requester,omitempty"`
	// Settlement chain name, e.g. "base_sepolia".
	SettleChain string `protobuf:"bytes,4,opt,name=settle_chain,json=settleChain,proto3" json:"settle_chain,omitempty"`
	// Application-specific intent type, e.g. "book_flight".
	IntentType string `protobuf:"bytes,5,opt,name=intent_type,json=intentType,proto3" json:"intent_type,omitempty"`
	// Execution parameters. The on-chain params hash is keccak256(params).
	Params *IntentParams `protobuf:"bytes,6,opt,name=params,proto3" json:"params,omitempty"`
	// ERC-20 token address for tips (0x0 for native).
	TipsToken string `protobuf:"bytes,7,opt,name=tips_token,json=tipsToken,proto3" json:"tips_token,omitempty"`
	// Tips amount as uint256 decimal string.
	Tips string `protobuf:"bytes,8,opt,name=tips,proto3" json:"tips,omitempty"`
	// Execution deadline (unix seconds).
	Deadline int64 `protobuf:"varint,9,opt,name=deadline,proto3" json:"deadline,omitempty"`
	// User signature covering canonical intent content.
	Signature []byte `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`
	// ERC-20 token address for budget (0x0 for native).
	BudgetToken string `protobuf:"bytes,11,opt,name=budget_token,json=budgetToken,proto3" json:"budget_token,omitempty"`
	// Maximum execution budget as uint256 decimal string (includes all costs).
	Budget        string `protobuf:"bytes,12,opt,name=budget,proto3" json:"budget,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitIntentRequest) Reset() {
	*x = SubmitIntentRequest{}
	mi := &file_rootlayer_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitIntentRequest) ProtoMessage() {}

func (x *SubmitIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitIntentRequest.ProtoReflect.Descriptor instead.
func (*SubmitIntentRequest) Descriptor() ([]byte, []int) {
	return file_rootlayer_service_proto_rawDescGZIP(), []int{13}
}

func (x *SubmitIntentRequest) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

func (x *SubmitIntentRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *SubmitIntentRequest) GetRequester() string {
	if x != nil {
		return x.Requester
	}
	return ""
}

func (x *SubmitIntentRequest) GetSettleChain() string {
	if x != nil {
		return x.SettleChain
	}
	return ""
}

func (x *SubmitIntentRequest) GetIntentType() string {
	if x != nil {
		return x.IntentType
	}
	return ""
}

func (x *SubmitIntentRequest) GetParams() *IntentParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *SubmitIntentRequest) GetTipsToken() string {
	if x != nil {
		return x.TipsToken
	}
	return ""
}

func (x *SubmitIntentRequest) GetTips() string {
	if x != nil {
		return x.Tips
	}
	return ""
}

func (x *SubmitIntentRequest) GetDeadline() int64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *SubmitIntentRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SubmitIntentRequest) GetBudgetToken() string {
	if x != nil {
		return x.BudgetToken
	}
	return ""
}

func (x *SubmitIntentRequest) GetBudget() string {
	if x != nil {
		return x.Budget
	}
	return ""
}

// Health check response payload.
type HealthCheckResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Service health: "SERVING" or "NOT_SERVING".
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Logical service name.
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// Server timestamp (unix seconds).
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Service semantic version.
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Additional details, if any.
	Details       map[string]string `protobuf:"bytes,5,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_rootlayer_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_rootlayer_service_proto_rawDescGZIP(), []int{14}
}

func (x *HealthCheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthCheckResponse) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *HealthCheckResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HealthCheckResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HealthCheckResponse) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

var File_rootlayer_service_proto protoreflect.FileDescriptor

const file_rootlayer_service_proto_rawDesc = "" +
	"\n" +
	"\x17rootlayer/service.proto\x12\frootlayer.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x16rootlayer/intent.proto\x1a\x1arootlayer/assignment.proto\x1a\x1arootlayer/validation.proto\"@\n" +
	"\x03Ack\x12\x0e\n" +
	"\x02ok\x18\x01 \x01(\bR\x02ok\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x17\n" +
	"\atx_hash\x18\x03 \x01(\tR\x06txHash\"\x87\x02\n" +
	"\x17SubscribeIntentsRequest\x12\x1b\n" +
	"\tsubnet_id\x18\x01 \x01(\tR\bsubnetId\x12!\n" +
	"\fmin_deadline\x18\x02 \x01(\x03R\vminDeadline\x12\x19\n" +
	"\bmin_tips\x18\x03 \x01(\tR\aminTips\x12!\n" +
	"\fintent_types\x18\x04 \x03(\tR\vintentTypes\x12?\n" +
	"\rstatus_filter\x18\x05 \x03(\x0e2\x1a.rootlayer.v1.IntentStatusR\fstatusFilter\x12-\n" +
	"\x12include_historical\x18\x06 \x01(\bR\x11includeHistorical\"\x9e\x02\n" +
	"\x11IntentStreamEvent\x12\x1d\n" +
	"\n" +
	"event_type\x18\x01 \x01(\tR\teventType\x12,\n" +
	"\x06intent\x18\x02 \x01(\v2\x14.rootlayer.v1.IntentR\x06intent\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12\x16\n" +
	"\x06source\x18\x04 \x01(\tR\x06source\x12I\n" +
	"\bmetadata\x18\x05 \x03(\v2-.rootlayer.v1.IntentStreamEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x94\x01\n" +
	"\x16SubscribeStatusRequest\x12\x1d\n" +
	"\n" +
	"intent_ids\x18\x01 \x03(\tR\tintentIds\x126\n" +
	"\bstatuses\x18\x02 \x03(\x0e2\x1a.rootlayer.v1.IntentStatusR\bstatuses\x12#\n" +
	"\rsubscriber_id\x18\x03 \x01(\tR\fsubscriberId\"\xe4\x02\n" +
	"\x11StatusUpdateEvent\x12\x1b\n" +
	"\tintent_id\x18\x01 \x01(\tR\bintentId\x129\n" +
	"\n" +
	"old_status\x18\x02 \x01(\x0e2\x1a.rootlayer.v1.IntentStatusR\toldStatus\x129\n" +
	"\n" +
	"new_status\x18\x03 \x01(\x0e2\x1a.rootlayer.v1.IntentStatusR\tnewStatus\x12\x16\n" +
	"\x06reason\x18\x04 \x01(\tR\x06reason\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x03R\ttimestamp\x12I\n" +
	"\bmetadata\x18\x06 \x03(\v2-.rootlayer.v1.StatusUpdateEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa3\x01\n" +
	"\x14SubmitIntentResponse\x12\x0e\n" +
	"\x02ok\x18\x01 \x01(\bR\x02ok\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x1b\n" +
	"\tintent_id\x18\x03 \x01(\tR\bintentId\x12\x1f\n" +
	"\vparams_hash\x18\x04 \x01(\fR\n" +
	"paramsHash\x12+\n" +
	"\x11intent_expiration\x18\x05 \x01(\x03R\x10intentExpiration\"\xea\x01\n" +
	"\x18SubmitIntentBatchRequest\x127\n" +
	"\x05items\x18\x01 \x03(\v2!.rootlayer.v1.SubmitIntentRequestR\x05items\x12\x19\n" +
	"\bbatch_id\x18\x02 \x01(\tR\abatchId\x12\"\n" +
	"\n" +
	"partial_ok\x18\x03 \x01(\bH\x00R\tpartialOk\x88\x01\x01\x120\n" +
	"\x12treat_exists_as_ok\x18\x04 \x01(\bH\x01R\x0ftreatExistsAsOk\x88\x01\x01B\r\n" +
	"\v_partial_okB\x15\n" +
	"\x13_treat_exists_as_ok\"\x9d\x01\n" +
	"\x19SubmitIntentBatchResponse\x12<\n" +
	"\aresults\x18\x01 \x03(\v2\".rootlayer.v1.SubmitIntentResponseR\aresults\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\x05R\asuccess\x12\x16\n" +
	"\x06failed\x18\x03 \x01(\x05R\x06failed\x12\x10\n" +
	"\x03msg\x18\x04 \x01(\tR\x03msg\"\xa6\x01\n" +
	"\x1cValidationBundleBatchRequest\x128\n" +
	"\abundles\x18\x01 \x03(\v2\x1e.rootlayer.v1.ValidationBundleR\abundles\x12\x19\n" +
	"\bbatch_id\x18\x02 \x01(\tR\abatchId\x12\"\n" +
	"\n" +
	"partial_ok\x18\x03 \x01(\bH\x00R\tpartialOk\x88\x01\x01B\r\n" +
	"\v_partial_ok\"\x9a\x01\n" +
	"\x1dValidationBundleBatchResponse\x125\n" +
	"\aresults\x18\x01 \x03(\v2\x1b.rootlayer.v1.ValidationAckR\aresults\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\x05R\asuccess\x12\x16\n" +
	"\x06failed\x18\x03 \x01(\x05R\x06failed\x12\x10\n" +
	"\x03msg\x18\x04 \x01(\tR\x03msg\"\xaa\x02\n" +
	"\x11GetIntentsRequest\x12\x1b\n" +
	"\tintent_id\x18\x01 \x01(\tR\bintentId\x12\x1b\n" +
	"\tsubnet_id\x18\x02 \x01(\tR\bsubnetId\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\x12\x1c\n" +
	"\trequester\x18\x04 \x01(\tR\trequester\x12!\n" +
	"\fmin_deadline\x18\x05 \x01(\x03R\vminDeadline\x12\x19\n" +
	"\bmin_tips\x18\x06 \x01(\tR\aminTips\x12\x12\n" +
	"\x04page\x18\a \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\b \x01(\x05R\bpageSize\x12\x19\n" +
	"\border_by\x18\t \x01(\tR\aorderBy\x12\x1b\n" +
	"\torder_dir\x18\n" +
	" \x01(\tR\borderDir\"\xac\x01\n" +
	"\x12GetIntentsResponse\x12.\n" +
	"\aintents\x18\x01 \x03(\v2\x14.rootlayer.v1.IntentR\aintents\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1f\n" +
	"\vtotal_pages\x18\x05 \x01(\x03R\n" +
	"totalPages\"/\n" +
	"\x10GetIntentRequest\x12\x1b\n" +
	"\tintent_id\x18\x01 \x01(\tR\bintentId\"\x8d\x03\n" +
	"\x13SubmitIntentRequest\x12\x1b\n" +
	"\tintent_id\x18\x01 \x01(\tR\bintentId\x12\x1b\n" +
	"\tsubnet_id\x18\x02 \x01(\tR\bsubnetId\x12\x1c\n" +
	"\trequester\x18\x03 \x01(\tR\trequester\x12!\n" +
	"\fsettle_chain\x18\x04 \x01(\tR\vsettleChain\x12\x1f\n" +
	"\vintent_type\x18\x05 \x01(\tR\n" +
	"intentType\x122\n" +
	"\x06params\x18\x06 \x01(\v2\x1a.rootlayer.v1.IntentParamsR\x06params\x12\x1d\n" +
	"\n" +
	"tips_token\x18\a \x01(\tR\ttipsToken\x12\x12\n" +
	"\x04tips\x18\b \x01(\tR\x04tips\x12\x1a\n" +
	"\bdeadline\x18\t \x01(\x03R\bdeadline\x12\x1c\n" +
	"\tsignature\x18\n" +
	" \x01(\fR\tsignature\x12!\n" +
	"\fbudget_token\x18\v \x01(\tR\vbudgetToken\x12\x16\n" +
	"\x06budget\x18\f \x01(\tR\x06budget\"\x85\x02\n" +
	"\x13HealthCheckResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x18\n" +
	"\aservice\x18\x02 \x01(\tR\aservice\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\x12\x18\n" +
	"\aversion\x18\x04 \x01(\tR\aversion\x12H\n" +
	"\adetails\x18\x05 \x03(\v2..rootlayer.v1.HealthCheckResponse.DetailsEntryR\adetails\x1a:\n" +
	"\fDetailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x012\x91\t\n" +
	"\x11IntentPoolService\x12\x8d\x01\n" +
	"\x11SubmitIntentBatch\x12&.rootlayer.v1.SubmitIntentBatchRequest\x1a'.rootlayer.v1.SubmitIntentBatchResponse\"'\x82\xd3\xe4\x93\x02!:\x01*\"\x1c/api/v1/intents/submit/batch\x12x\n" +
	"\fSubmitIntent\x12!.rootlayer.v1.SubmitIntentRequest\x1a\".rootlayer.v1.SubmitIntentResponse\"!\x82\xd3\xe4\x93\x02\x1b:\x01*\"\x16/api/v1/intents/submit\x12n\n" +
	"\n" +
	"GetIntents\x12\x1f.rootlayer.v1.GetIntentsRequest\x1a .rootlayer.v1.GetIntentsResponse\"\x1d\x82\xd3\xe4\x93\x02\x17\x12\x15/api/v1/intents/query\x12l\n" +
	"\tGetIntent\x12\x1e.rootlayer.v1.GetIntentRequest\x1a\x14.rootlayer.v1.Intent\")\x82\xd3\xe4\x93\x02#\x12!/api/v1/intents/query/{intent_id}\x12m\n" +
	"\x0ePostAssignment\x12\x18.rootlayer.v1.Assignment\x1a\x11.rootlayer.v1.Ack\".\x82\xd3\xe4\x93\x02(:\x01*\"#/api/v1/callbacks/assignment/submit\x12x\n" +
	"\x13PostAssignmentBatch\x12\x1d.rootlayer.v1.AssignmentBatch\x1a\x11.rootlayer.v1.Ack\"/\x82\xd3\xe4\x93\x02):\x01*\"$/api/v1/callbacks/assignments/submit\x12t\n" +
	"\x0fPostAssignments\x12\x1d.rootlayer.v1.AssignmentBatch\x1a\x11.rootlayer.v1.Ack\"/\x82\xd3\xe4\x93\x02):\x01*\"$/api/v1/callbacks/assignments/submit\x12\x85\x01\n" +
	"\x16SubmitValidationBundle\x12\x1e.rootlayer.v1.ValidationBundle\x1a\x1b.rootlayer.v1.ValidationAck\".\x82\xd3\xe4\x93\x02(:\x01*\"#/api/v1/callbacks/validation/submit\x12\xac\x01\n" +
	"\x1bSubmitValidationBundleBatch\x12*.rootlayer.v1.ValidationBundleBatchRequest\x1a+.rootlayer.v1.ValidationBundleBatchResponse\"4\x82\xd3\xe4\x93\x02.:\x01*\")/api/v1/callbacks/validation/submit/batch2\xd6\x01\n" +
	"\x13SubscriptionService\x12\\\n" +
	"\x10SubscribeIntents\x12%.rootlayer.v1.SubscribeIntentsRequest\x1a\x1f.rootlayer.v1.IntentStreamEvent0\x01\x12a\n" +
	"\x16SubscribeStatusUpdates\x12$.rootlayer.v1.SubscribeStatusRequest\x1a\x1f.rootlayer.v1.StatusUpdateEvent0\x012d\n" +
	"\rHealthService\x12S\n" +
	"\x05Check\x12\x16.google.protobuf.Empty\x1a!.rootlayer.v1.HealthCheckResponse\"\x0f\x82\xd3\xe4\x93\x02\t\x12\a/healthBDZBgithub.com/pin-protocol/rootlayer/api/gen/go/rootlayer;rootlayerv1b\x06proto3"

var (
	file_rootlayer_service_proto_rawDescOnce sync.Once
	file_rootlayer_service_proto_rawDescData []byte
)

func file_rootlayer_service_proto_rawDescGZIP() []byte {
	file_rootlayer_service_proto_rawDescOnce.Do(func() {
		file_rootlayer_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rootlayer_service_proto_rawDesc), len(file_rootlayer_service_proto_rawDesc)))
	})
	return file_rootlayer_service_proto_rawDescData
}

var file_rootlayer_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_rootlayer_service_proto_goTypes = []any{
	(*Ack)(nil),                           // 0: rootlayer.v1.Ack
	(*SubscribeIntentsRequest)(nil),       // 1: rootlayer.v1.SubscribeIntentsRequest
	(*IntentStreamEvent)(nil),             // 2: rootlayer.v1.IntentStreamEvent
	(*SubscribeStatusRequest)(nil),        // 3: rootlayer.v1.SubscribeStatusRequest
	(*StatusUpdateEvent)(nil),             // 4: rootlayer.v1.StatusUpdateEvent
	(*SubmitIntentResponse)(nil),          // 5: rootlayer.v1.SubmitIntentResponse
	(*SubmitIntentBatchRequest)(nil),      // 6: rootlayer.v1.SubmitIntentBatchRequest
	(*SubmitIntentBatchResponse)(nil),     // 7: rootlayer.v1.SubmitIntentBatchResponse
	(*ValidationBundleBatchRequest)(nil),  // 8: rootlayer.v1.ValidationBundleBatchRequest
	(*ValidationBundleBatchResponse)(nil), // 9: rootlayer.v1.ValidationBundleBatchResponse
	(*GetIntentsRequest)(nil),             // 10: rootlayer.v1.GetIntentsRequest
	(*GetIntentsResponse)(nil),            // 11: rootlayer.v1.GetIntentsResponse
	(*GetIntentRequest)(nil),              // 12: rootlayer.v1.GetIntentRequest
	(*SubmitIntentRequest)(nil),           // 13: rootlayer.v1.SubmitIntentRequest
	(*HealthCheckResponse)(nil),           // 14: rootlayer.v1.HealthCheckResponse
	nil,                                   // 15: rootlayer.v1.IntentStreamEvent.MetadataEntry
	nil,                                   // 16: rootlayer.v1.StatusUpdateEvent.MetadataEntry
	nil,                                   // 17: rootlayer.v1.HealthCheckResponse.DetailsEntry
	(IntentStatus)(0),                     // 18: rootlayer.v1.IntentStatus
	(*Intent)(nil),                        // 19: rootlayer.v1.Intent
	(*ValidationBundle)(nil),              // 20: rootlayer.v1.ValidationBundle
	(*ValidationAck)(nil),                 // 21: rootlayer.v1.ValidationAck
	(*IntentParams)(nil),                  // 22: rootlayer.v1.IntentParams
	(*Assignment)(nil),                    // 23: rootlayer.v1.Assignment
	(*AssignmentBatch)(nil),               // 24: rootlayer.v1.AssignmentBatch
	(*emptypb.Empty)(nil),                 // 25: google.protobuf.Empty
}
var file_rootlayer_service_proto_depIdxs = []int32{
	18, // 0: rootlayer.v1.SubscribeIntentsRequest.status_filter:type_name -> rootlayer.v1.IntentStatus
	19, // 1: rootlayer.v1.IntentStreamEvent.intent:type_name -> rootlayer.v1.Intent
	15, // 2: rootlayer.v1.IntentStreamEvent.metadata:type_name -> rootlayer.v1.IntentStreamEvent.MetadataEntry
	18, // 3: rootlayer.v1.SubscribeStatusRequest.statuses:type_name -> rootlayer.v1.IntentStatus
	18, // 4: rootlayer.v1.StatusUpdateEvent.old_status:type_name -> rootlayer.v1.IntentStatus
	18, // 5: rootlayer.v1.StatusUpdateEvent.new_status:type_name -> rootlayer.v1.IntentStatus
	16, // 6: rootlayer.v1.StatusUpdateEvent.metadata:type_name -> rootlayer.v1.StatusUpdateEvent.MetadataEntry
	13, // 7: rootlayer.v1.SubmitIntentBatchRequest.items:type_name -> rootlayer.v1.SubmitIntentRequest
	5,  // 8: rootlayer.v1.SubmitIntentBatchResponse.results:type_name -> rootlayer.v1.SubmitIntentResponse
	20, // 9: rootlayer.v1.ValidationBundleBatchRequest.bundles:type_name -> rootlayer.v1.ValidationBundle
	21, // 10: rootlayer.v1.ValidationBundleBatchResponse.results:type_name -> rootlayer.v1.ValidationAck
	19, // 11: rootlayer.v1.GetIntentsResponse.intents:type_name -> rootlayer.v1.Intent
	22, // 12: rootlayer.v1.SubmitIntentRequest.params:type_name -> rootlayer.v1.IntentParams
	17, // 13: rootlayer.v1.HealthCheckResponse.details:type_name -> rootlayer.v1.HealthCheckResponse.DetailsEntry
	6,  // 14: rootlayer.v1.IntentPoolService.SubmitIntentBatch:input_type -> rootlayer.v1.SubmitIntentBatchRequest
	13, // 15: rootlayer.v1.IntentPoolService.SubmitIntent:input_type -> rootlayer.v1.SubmitIntentRequest
	10, // 16: rootlayer.v1.IntentPoolService.GetIntents:input_type -> rootlayer.v1.GetIntentsRequest
	12, // 17: rootlayer.v1.IntentPoolService.GetIntent:input_type -> rootlayer.v1.GetIntentRequest
	23, // 18: rootlayer.v1.IntentPoolService.PostAssignment:input_type -> rootlayer.v1.Assignment
	24, // 19: rootlayer.v1.IntentPoolService.PostAssignmentBatch:input_type -> rootlayer.v1.AssignmentBatch
	24, // 20: rootlayer.v1.IntentPoolService.PostAssignments:input_type -> rootlayer.v1.AssignmentBatch
	20, // 21: rootlayer.v1.IntentPoolService.SubmitValidationBundle:input_type -> rootlayer.v1.ValidationBundle
	8,  // 22: rootlayer.v1.IntentPoolService.SubmitValidationBundleBatch:input_type -> rootlayer.v1.ValidationBundleBatchRequest
	1,  // 23: rootlayer.v1.SubscriptionService.SubscribeIntents:input_type -> rootlayer.v1.SubscribeIntentsRequest
	3,  // 24: rootlayer.v1.SubscriptionService.SubscribeStatusUpdates:input_type -> rootlayer.v1.SubscribeStatusRequest
	25, // 25: rootlayer.v1.HealthService.Check:input_type -> google.protobuf.Empty
	7,  // 26: rootlayer.v1.IntentPoolService.SubmitIntentBatch:output_type -> rootlayer.v1.SubmitIntentBatchResponse
	5,  // 27: rootlayer.v1.IntentPoolService.SubmitIntent:output_type -> rootlayer.v1.SubmitIntentResponse
	11, // 28: rootlayer.v1.IntentPoolService.GetIntents:output_type -> rootlayer.v1.GetIntentsResponse
	19, // 29: rootlayer.v1.IntentPoolService.GetIntent:output_type -> rootlayer.v1.Intent
	0,  // 30: rootlayer.v1.IntentPoolService.PostAssignment:output_type -> rootlayer.v1.Ack
	0,  // 31: rootlayer.v1.IntentPoolService.PostAssignmentBatch:output_type -> rootlayer.v1.Ack
	0,  // 32: rootlayer.v1.IntentPoolService.PostAssignments:output_type -> rootlayer.v1.Ack
	21, // 33: rootlayer.v1.IntentPoolService.SubmitValidationBundle:output_type -> rootlayer.v1.ValidationAck
	9,  // 34: rootlayer.v1.IntentPoolService.SubmitValidationBundleBatch:output_type -> rootlayer.v1.ValidationBundleBatchResponse
	2,  // 35: rootlayer.v1.SubscriptionService.SubscribeIntents:output_type -> rootlayer.v1.IntentStreamEvent
	4,  // 36: rootlayer.v1.SubscriptionService.SubscribeStatusUpdates:output_type -> rootlayer.v1.StatusUpdateEvent
	14, // 37: rootlayer.v1.HealthService.Check:output_type -> rootlayer.v1.HealthCheckResponse
	26, // [26:38] is the sub-list for method output_type
	14, // [14:26] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_rootlayer_service_proto_init() }
func file_rootlayer_service_proto_init() {
	if File_rootlayer_service_proto != nil {
		return
	}
	file_rootlayer_intent_proto_init()
	file_rootlayer_assignment_proto_init()
	file_rootlayer_validation_proto_init()
	file_rootlayer_service_proto_msgTypes[6].OneofWrappers = []any{}
	file_rootlayer_service_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rootlayer_service_proto_rawDesc), len(file_rootlayer_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_rootlayer_service_proto_goTypes,
		DependencyIndexes: file_rootlayer_service_proto_depIdxs,
		MessageInfos:      file_rootlayer_service_proto_msgTypes,
	}.Build()
	File_rootlayer_service_proto = out.File
	file_rootlayer_service_proto_goTypes = nil
	file_rootlayer_service_proto_depIdxs = nil
}
