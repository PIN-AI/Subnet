// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v4.25.3
// source: rootlayer/assignment.proto

package rootlayerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Assignment status simplified to two primary states used by RootLayer.
type AssignmentStatus int32

const (
	// Unspecified (default/invalid)
	AssignmentStatus_ASSIGNMENT_STATUS_UNSPECIFIED AssignmentStatus = 0
	// Active (agent accepted and executing)
	AssignmentStatus_ASSIGNMENT_ACTIVE AssignmentStatus = 1
	// Failed (expired, rejected, or execution failed)
	AssignmentStatus_ASSIGNMENT_FAILED AssignmentStatus = 2
)

// Enum value maps for AssignmentStatus.
var (
	AssignmentStatus_name = map[int32]string{
		0: "ASSIGNMENT_STATUS_UNSPECIFIED",
		1: "ASSIGNMENT_ACTIVE",
		2: "ASSIGNMENT_FAILED",
	}
	AssignmentStatus_value = map[string]int32{
		"ASSIGNMENT_STATUS_UNSPECIFIED": 0,
		"ASSIGNMENT_ACTIVE":             1,
		"ASSIGNMENT_FAILED":             2,
	}
)

func (x AssignmentStatus) Enum() *AssignmentStatus {
	p := new(AssignmentStatus)
	*p = x
	return p
}

func (x AssignmentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssignmentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_rootlayer_assignment_proto_enumTypes[0].Descriptor()
}

func (AssignmentStatus) Type() protoreflect.EnumType {
	return &file_rootlayer_assignment_proto_enumTypes[0]
}

func (x AssignmentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssignmentStatus.Descriptor instead.
func (AssignmentStatus) EnumDescriptor() ([]byte, []int) {
	return file_rootlayer_assignment_proto_rawDescGZIP(), []int{0}
}

// Assignment selected by a subnet matcher for a given intent.
type Assignment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Assignment ID (UUID recommended).
	AssignmentId string `protobuf:"bytes,1,opt,name=assignment_id,json=assignmentId,proto3" json:"assignment_id,omitempty"`
	// The associated intent ID.
	IntentId string `protobuf:"bytes,2,opt,name=intent_id,json=intentId,proto3" json:"intent_id,omitempty"`
	// Selected agent identifier.
	AgentId string `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// The bid ID associated with this assignment.
	BidId string `protobuf:"bytes,4,opt,name=bid_id,json=bidId,proto3" json:"bid_id,omitempty"`
	// Current assignment status.
	Status AssignmentStatus `protobuf:"varint,5,opt,name=status,proto3,enum=rootlayer.v1.AssignmentStatus" json:"status,omitempty"`
	// Matcher ID (required for traceability and auditing).
	MatcherId string `protobuf:"bytes,6,opt,name=matcher_id,json=matcherId,proto3" json:"matcher_id,omitempty"`
	// Matcher signature authorizing the assignment.
	Signature     []byte `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Assignment) Reset() {
	*x = Assignment{}
	mi := &file_rootlayer_assignment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignment) ProtoMessage() {}

func (x *Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_assignment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignment.ProtoReflect.Descriptor instead.
func (*Assignment) Descriptor() ([]byte, []int) {
	return file_rootlayer_assignment_proto_rawDescGZIP(), []int{0}
}

func (x *Assignment) GetAssignmentId() string {
	if x != nil {
		return x.AssignmentId
	}
	return ""
}

func (x *Assignment) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

func (x *Assignment) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *Assignment) GetBidId() string {
	if x != nil {
		return x.BidId
	}
	return ""
}

func (x *Assignment) GetStatus() AssignmentStatus {
	if x != nil {
		return x.Status
	}
	return AssignmentStatus_ASSIGNMENT_STATUS_UNSPECIFIED
}

func (x *Assignment) GetMatcherId() string {
	if x != nil {
		return x.MatcherId
	}
	return ""
}

func (x *Assignment) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Acknowledgment from an agent regarding an assignment.
type AssignmentAck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Assignment ID being acknowledged.
	AssignmentId string `protobuf:"bytes,1,opt,name=assignment_id,json=assignmentId,proto3" json:"assignment_id,omitempty"`
	// Agent ID acknowledging the assignment.
	AgentId string `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// Acknowledgment timestamp (unix seconds).
	AckedAt int64 `protobuf:"varint,3,opt,name=acked_at,json=ackedAt,proto3" json:"acked_at,omitempty"`
	// Whether the agent accepts the assignment.
	Accepted bool `protobuf:"varint,4,opt,name=accepted,proto3" json:"accepted,omitempty"`
	// If not accepted, the reason provided by the agent.
	RejectionReason string `protobuf:"bytes,5,opt,name=rejection_reason,json=rejectionReason,proto3" json:"rejection_reason,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AssignmentAck) Reset() {
	*x = AssignmentAck{}
	mi := &file_rootlayer_assignment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignmentAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignmentAck) ProtoMessage() {}

func (x *AssignmentAck) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_assignment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignmentAck.ProtoReflect.Descriptor instead.
func (*AssignmentAck) Descriptor() ([]byte, []int) {
	return file_rootlayer_assignment_proto_rawDescGZIP(), []int{1}
}

func (x *AssignmentAck) GetAssignmentId() string {
	if x != nil {
		return x.AssignmentId
	}
	return ""
}

func (x *AssignmentAck) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *AssignmentAck) GetAckedAt() int64 {
	if x != nil {
		return x.AckedAt
	}
	return 0
}

func (x *AssignmentAck) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *AssignmentAck) GetRejectionReason() string {
	if x != nil {
		return x.RejectionReason
	}
	return ""
}

// Batch container for multiple assignments.
type AssignmentBatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Items in the batch.
	Assignments []*Assignment `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
	// Client-side batch ID for idempotency.
	BatchId string `protobuf:"bytes,2,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// Creation time for the batch (unix seconds).
	CreatedAt     int64 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignmentBatch) Reset() {
	*x = AssignmentBatch{}
	mi := &file_rootlayer_assignment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignmentBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignmentBatch) ProtoMessage() {}

func (x *AssignmentBatch) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_assignment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignmentBatch.ProtoReflect.Descriptor instead.
func (*AssignmentBatch) Descriptor() ([]byte, []int) {
	return file_rootlayer_assignment_proto_rawDescGZIP(), []int{2}
}

func (x *AssignmentBatch) GetAssignments() []*Assignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

func (x *AssignmentBatch) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *AssignmentBatch) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

// Query assignments for a particular agent.
type AgentAssignmentQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Agent identifier to filter on.
	AgentId string `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// Optional status filter.
	StatusFilter AssignmentStatus `protobuf:"varint,2,opt,name=status_filter,json=statusFilter,proto3,enum=rootlayer.v1.AssignmentStatus" json:"status_filter,omitempty"`
	// Pagination cursor.
	Cursor string `protobuf:"bytes,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
	// Max number of items to return.
	Limit         uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentAssignmentQuery) Reset() {
	*x = AgentAssignmentQuery{}
	mi := &file_rootlayer_assignment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentAssignmentQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentAssignmentQuery) ProtoMessage() {}

func (x *AgentAssignmentQuery) ProtoReflect() protoreflect.Message {
	mi := &file_rootlayer_assignment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentAssignmentQuery.ProtoReflect.Descriptor instead.
func (*AgentAssignmentQuery) Descriptor() ([]byte, []int) {
	return file_rootlayer_assignment_proto_rawDescGZIP(), []int{3}
}

func (x *AgentAssignmentQuery) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *AgentAssignmentQuery) GetStatusFilter() AssignmentStatus {
	if x != nil {
		return x.StatusFilter
	}
	return AssignmentStatus_ASSIGNMENT_STATUS_UNSPECIFIED
}

func (x *AgentAssignmentQuery) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *AgentAssignmentQuery) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

var File_rootlayer_assignment_proto protoreflect.FileDescriptor

const file_rootlayer_assignment_proto_rawDesc = "" +
	"\n" +
	"\x1arootlayer/assignment.proto\x12\frootlayer.v1\"\xf5\x01\n" +
	"\n" +
	"Assignment\x12#\n" +
	"\rassignment_id\x18\x01 \x01(\tR\fassignmentId\x12\x1b\n" +
	"\tintent_id\x18\x02 \x01(\tR\bintentId\x12\x19\n" +
	"\bagent_id\x18\x03 \x01(\tR\aagentId\x12\x15\n" +
	"\x06bid_id\x18\x04 \x01(\tR\x05bidId\x126\n" +
	"\x06status\x18\x05 \x01(\x0e2\x1e.rootlayer.v1.AssignmentStatusR\x06status\x12\x1d\n" +
	"\n" +
	"matcher_id\x18\x06 \x01(\tR\tmatcherId\x12\x1c\n" +
	"\tsignature\x18\a \x01(\fR\tsignature\"\xb1\x01\n" +
	"\rAssignmentAck\x12#\n" +
	"\rassignment_id\x18\x01 \x01(\tR\fassignmentId\x12\x19\n" +
	"\bagent_id\x18\x02 \x01(\tR\aagentId\x12\x19\n" +
	"\backed_at\x18\x03 \x01(\x03R\aackedAt\x12\x1a\n" +
	"\baccepted\x18\x04 \x01(\bR\baccepted\x12)\n" +
	"\x10rejection_reason\x18\x05 \x01(\tR\x0frejectionReason\"\x87\x01\n" +
	"\x0fAssignmentBatch\x12:\n" +
	"\vassignments\x18\x01 \x03(\v2\x18.rootlayer.v1.AssignmentR\vassignments\x12\x19\n" +
	"\bbatch_id\x18\x02 \x01(\tR\abatchId\x12\x1d\n" +
	"\n" +
	"created_at\x18\x03 \x01(\x03R\tcreatedAt\"\xa4\x01\n" +
	"\x14AgentAssignmentQuery\x12\x19\n" +
	"\bagent_id\x18\x01 \x01(\tR\aagentId\x12C\n" +
	"\rstatus_filter\x18\x02 \x01(\x0e2\x1e.rootlayer.v1.AssignmentStatusR\fstatusFilter\x12\x16\n" +
	"\x06cursor\x18\x03 \x01(\tR\x06cursor\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\rR\x05limit*c\n" +
	"\x10AssignmentStatus\x12!\n" +
	"\x1dASSIGNMENT_STATUS_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11ASSIGNMENT_ACTIVE\x10\x01\x12\x15\n" +
	"\x11ASSIGNMENT_FAILED\x10\x02BDZBgithub.com/pin-protocol/rootlayer/api/gen/go/rootlayer;rootlayerv1b\x06proto3"

var (
	file_rootlayer_assignment_proto_rawDescOnce sync.Once
	file_rootlayer_assignment_proto_rawDescData []byte
)

func file_rootlayer_assignment_proto_rawDescGZIP() []byte {
	file_rootlayer_assignment_proto_rawDescOnce.Do(func() {
		file_rootlayer_assignment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rootlayer_assignment_proto_rawDesc), len(file_rootlayer_assignment_proto_rawDesc)))
	})
	return file_rootlayer_assignment_proto_rawDescData
}

var file_rootlayer_assignment_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rootlayer_assignment_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_rootlayer_assignment_proto_goTypes = []any{
	(AssignmentStatus)(0),        // 0: rootlayer.v1.AssignmentStatus
	(*Assignment)(nil),           // 1: rootlayer.v1.Assignment
	(*AssignmentAck)(nil),        // 2: rootlayer.v1.AssignmentAck
	(*AssignmentBatch)(nil),      // 3: rootlayer.v1.AssignmentBatch
	(*AgentAssignmentQuery)(nil), // 4: rootlayer.v1.AgentAssignmentQuery
}
var file_rootlayer_assignment_proto_depIdxs = []int32{
	0, // 0: rootlayer.v1.Assignment.status:type_name -> rootlayer.v1.AssignmentStatus
	1, // 1: rootlayer.v1.AssignmentBatch.assignments:type_name -> rootlayer.v1.Assignment
	0, // 2: rootlayer.v1.AgentAssignmentQuery.status_filter:type_name -> rootlayer.v1.AssignmentStatus
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_rootlayer_assignment_proto_init() }
func file_rootlayer_assignment_proto_init() {
	if File_rootlayer_assignment_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rootlayer_assignment_proto_rawDesc), len(file_rootlayer_assignment_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rootlayer_assignment_proto_goTypes,
		DependencyIndexes: file_rootlayer_assignment_proto_depIdxs,
		EnumInfos:         file_rootlayer_assignment_proto_enumTypes,
		MessageInfos:      file_rootlayer_assignment_proto_msgTypes,
	}.Build()
	File_rootlayer_assignment_proto = out.File
	file_rootlayer_assignment_proto_goTypes = nil
	file_rootlayer_assignment_proto_depIdxs = nil
}
